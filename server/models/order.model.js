const { kStringMaxLength } = require('buffer');
const { string } = require('joi');
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema(
  {
    orderId: String,
    marketId: String,
    sellerOrderId: String,
    erpOrderId: String,
    purchaseDate: String,
    fulfillment: String,
    orderStatus: Number,
    orderType: String,
    returns: Number,
    lastUpdateDate: String,
    b2b: Number,
    addressPostalcode: String,
    addressLine1: String,
    addressLine2: String,
    addressLine3: String,
    addressCity: String,
    addressCountrycode: String,
    addressStateorregion: String,
    addressPhone: String,
    addressName: String,
    buyerEmail: String,
    buyerName: String,
    orderTotal: Number,
    evaluation: Boolean,
    orderTotalAmount: {
      currencySymbol: String,
      currencyAmount: Number,
      currencyCode: String,
    },
    itemVos: [
      {
        itemId: String,
        smallImageUrl: String,
        productName: String,
        asin: String,
        listingTitle: String,
        sku: String,
        sellerSku: String,
        quantityOrdered: Number,
        quantityShipped: Number,
        itemPrice: Number,
        shippingPrice: Number,
        shippingTax: Number,
        itemTax: Number,
        ShippingDiscount: Number,
        promotionDiscount: Number,
        productCost: Number,
        productVat: Number,
        productArriveCost: Number,
        productShippingCost: Number,
        giftWrapPrice: Number,
        giftWrapTax: Number,
        bogusPrice: Number,
        promotionId: String,
        itemPriceAmount: Number,
        shippingPriceAmount: Number,
        shippingTaxAmount: Number,
        itemTaxAmount: Number,
        shippingDiscountAmount: Number,
        promotionDiscountAmount: Number,
        productCostAmount: Number,
        productVatAmount: Number,
        productArriveCostAmount: Number,
        productShippingCostAmount: Number,
        giftWrapPriceAmount: Number,
        giftWrapTaxAmount: Number,
        bogusPriceAmount: Number,
        bogusPrincipalPriceAmount: Number,
      },
    ],
    shipTrack: String,
    carrier: String,
    ShipmentWarehouseId: Number,
    salesChannel: String,
    refund: Number,
    evaluation: Boolean,
    vatPermission: String,
    vat: Number,
    returnVos: [
      {
        warehouseId: Number,
        warehouseName: String,
        returnDate: String,
        returnDateTime: String,
        returnDateLong: Number,
        returnDateZero: String,
        purchaseDate: String,
        asin: String,
        msku: String,
        productName: String,
        fnsku: String,
        sku: String,
        product: String,
        categoryName: String,
        quantity: Number,
        fulfillmentCenterId: String,
        disposition: String,
        reason: String,
        status: String,
        licensePlateNumber: String,
        imageUrl: String,
        customerComments: String,
        listingTitle: String,
        others: String,
        returnOrderQuantity: Number,
        returnOrderItems: Number,
        sellableItems: Number,
        damagedItems: Number,
        customerDamagedItems: Number,
        defectiveItems: Number,
        carrierDamagedItems: Number,
        expiredItems: Number,
        tagIds: Array,
        tagNames: Array,
        tagMemo: String,
        tagEchoVOList: Array,
      },
    ],
    orderfeeVos: [
      {
        settlementTime: String,
        marketTime: String,
        product: String,
        sellerSku: String,
        quantity: Number,
        feeType: String,
        typeDetail: String,
        price: Number,
        usdPrice: Number,
        priceAmount: {
          CurrencyCode: String,
          currencySymbol: String,
          CurrencyAmount: Number,
        },
        usdPriceAmount: {
          CurrencyCode: String,
          currencySymbol: String,
          CurrencyAmount: Number,
        },
        lastUpdate: String,
      },
    ],
  },
  {
    timestamps: true,
  }
);

module.exports = mongoose.model('Order', OrderSchema);
